name: Library Management System CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
      
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Para de executar se houver erros de sintaxe
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Avisos gerais (não param o build)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: false
    
    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy library_manager.py --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        python -m unittest test_library.py -v
    
    - name: Run tests with pytest
      run: |
        pip install pytest pytest-cov
        pytest test_library.py -v --tb=short
    
    - name: Generate coverage report
      run: |
        coverage run -m unittest test_library.py
        coverage report -m
        coverage xml
        coverage html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false
    
    - name: Test main program execution
      run: |
        python library_manager.py
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        name: coverage-html-report
        path: htmlcov/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint mypy bandit safety
    
    - name: Check code formatting with Black
      run: |
        black --check --diff library_manager.py test_library.py
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff library_manager.py test_library.py
    
    - name: Advanced linting with pylint
      run: |
        pylint library_manager.py --disable=C0114,C0116,R0903 --fail-under=8.0
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check for security issues in dependencies
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
    
    - name: Create package structure
      run: |
        mkdir -p dist
        mkdir -p build
        cp library_manager.py dist/
        cp test_library.py dist/
        cp requirements.txt dist/
        echo "# Library Management System Package" > dist/README.md
        echo "Built on $(date)" >> dist/README.md
    
    - name: Verify package contents
      run: |
        echo "=== Package Contents ==="
        ls -la dist/
        echo "=== File Sizes ==="
        du -h dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: library-management-package
        path: dist/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration test scenario
      run: |
        python -c "
        from library_manager import LibraryManager
        import sys
        
        print('=== Teste de Integração ===')
        
        # Cenário completo de uso
        library = LibraryManager()
        
        # 1. Adicionar livros
        library.add_book('978-1', 'Livro 1', 'Autor 1', 2020, 2)
        library.add_book('978-2', 'Livro 2', 'Autor 2', 2021, 1)
        
        # 2. Registrar usuários
        library.register_user('001', 'João', 'joao@test.com')
        library.register_user('002', 'Maria', 'maria@test.com')
        
        # 3. Empréstimos
        library.borrow_book('001', '978-1')
        library.borrow_book('002', '978-2')
        
        # 4. Verificar estatísticas
        stats = library.get_library_stats()
        assert stats['active_loans'] == 2
        assert stats['available_books'] == 1
        
        # 5. Buscar livros
        results = library.search_books('Livro')
        assert len(results) == 2
        
        # 6. Devolver livro
        library.return_book('001', '978-1')
        
        # 7. Verificar estatísticas finais
        final_stats = library.get_library_stats()
        assert final_stats['active_loans'] == 1
        assert final_stats['available_books'] == 2
        
        print('Todos os testes de integração passaram!')
        "

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, code-quality, build, integration-tests]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "Build SUCCESSFUL for Library Management System"
          echo "All tests passed across all platforms and Python versions"
          echo "Code quality checks passed"
        else
          echo "Build FAILED for Library Management System"
          echo "Check the logs for details"
          exit 1
        fi
